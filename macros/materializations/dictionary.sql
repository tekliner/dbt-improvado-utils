{%- materialization dictionary -%}
    {# 
        Steamlines a dictionary creating process by reducing the amount of boilerplate code.
        Creates a dictionary with a "direct" layout for "dev" or "staging" schemas; otherwise, keeps the settings unchanged.
        This materialization requires "--depends_on:{{ ref('<source_table_name>') }}" clause.
        Arguments:
            primary_key(string, required):          Comma-separated list of columns to use as primary key
            columns_to_include(list, optional):     List of columns to include in the dictionary, defaults to "*".
                                                    When "*" is used, "columns_to_exclude" can be used

            columns_to_exclude(list, optional):     List of columns to exclude from the dictionary
            lifetime(string, required):             The lifetime of the dictionary
            layout(string, required):               The layout of the dictionary
    #}

-- base settings -------------------------------------------------------------------------------------------------------
    {%- set re                  = modules.re -%}
    {%- set is_prod_schema      = mcr_is_prod_schema() -%}
    {%- set connection_string   = mcr_source_clickhouse() -%}

    -- patterns to extract params from the "connection_string" generated by the "mcr_source_clickhouse" macro
    {%- set database_pattern    = re.compile('(?i)(?<=db \')(\w+)(?=\')')-%}
    {%- set table_pattern       = re.compile('(?i)(?<=table \')(\w+)(?=\')')-%}
    {%- set create_clause       = 'CREATE DICTIONARY IF NOT EXISTS ' -%}
    {%- set primary_key_pattern = 'PRIMARY KEY {}' -%}
    {%- set lifetime_pattern    = 'LIFETIME(MIN {} MAX {})' -%}
    {%- set layout_pattern      = 'LAYOUT({})' -%}

    -- there should always be a match while the "mcr_source_clickhouse" macro is working properly
    {%- set source_database     = database_pattern.search(connection_string).group(0) -%}
    {%- set source_table        = table_pattern.search(connection_string).group(0) -%}

    {%- set source_relation     = adapter.get_relation(none, source_database, source_table) -%}
    {%- set source_columns      = adapter.get_columns_in_relation(source_relation) -%}

    {%- set target_relation     = this.incorporate() -%}

-- materialization settings
    {%- set primary_key_config  = config.require('primary_key') -%}
    {%- set columns_to_include  = config.get('columns_to_include', default='*') -%}
    {%- set columns_to_exclude  = config.get('columns_to_exclude', default=[]) -%}
    {%- set lifetime_config     = config.require('lifetime').replace(' ', '').split(',') -%}
    {%- set layout_config       = config.require('layout').upper() -%}
    {%- set dev_schema_layout   = 'DIRECT' -%}


-- logic ---------------------------------------------------------------------------------------------------------------
    -- in order to use "loop.last" and set a comma on the last line correctly "source_columns" is filtered
    {%- set filtered_columns = namespace(value=[]) -%}

    {%- if columns_to_include == '*' and columns_to_exclude -%}
        {%- for column in source_columns -%}
            {%- if column.name not in columns_to_exclude -%}
                {%- do filtered_columns.value.append(column) -%}
            {%- endif -%}
        {%- endfor -%}

    {%- elif columns_to_include != '*' and columns_to_include | length > 0 -%}
        {%- for column in source_columns -%}
            {%- if column.name in columns_to_include -%}
                {%- do filtered_columns.value.append(column) -%}
            {%- endif -%}
        {%- endfor -%}

    {%- endif -%}

    {%- set source_columns = filtered_columns.value -%}

    -- generating the dictionary ddl
    {%- set dictionary_ddl = namespace(value=sql) -%}

    {%- for column in source_columns -%}
        {%- if loop.first -%}
            {%- set dictionary_ddl.value = dictionary_ddl.value ~ create_clause ~ (target_relation | string) ~ '\n(' -%}
        {%- endif -%}

        {%- set dictionary_ddl.value = dictionary_ddl.value ~ '\n\t`{}` {}'.format(column.name, column.data_type) -%}

        {%- if not loop.last -%}
            {%- set dictionary_ddl.value = dictionary_ddl.value ~ ',' -%}

        {%- else -%}
            {%- set dictionary_ddl.value = dictionary_ddl.value ~ '\n)\n' ~ primary_key_pattern.format(primary_key_config) -%}
            {%- set dictionary_ddl.value = dictionary_ddl.value ~ '\n' ~ connection_string -%}
        {%- endif -%}

    {%- endfor -%}

    {% set sql = dictionary_ddl.value %}

    {%- if is_prod_schema -%}
        {%- set sql = sql ~ '\n' ~ lifetime_pattern.format(*lifetime_config) -%}
        {%- set sql = sql ~ '\n' ~ layout_pattern.format(layout_config) -%}

    {%- else -%}
        {%- set sql = sql ~ '\n' ~ layout_pattern.format(dev_schema_layout) -%}
    {%- endif -%}

    {{ log('Creating dictionary:\n' ~ sql, info=true) }}

    {%- do run_query(sql) -%}

    {%- call noop_statement('main', 'Done') -%} {%- endcall -%}
    {%- do return ({'relations': [target_relation]}) -%}

{%- endmaterialization -%}